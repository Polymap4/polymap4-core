<?xml version="1.0"?>
<!--
 This Ant build script downloads dependency jars needed by thus bundle
 from several maven repositories on the net. See copy.properties for
 general settings. 
 -->
<project name="org.polymap.service.fs" default="build" basedir="." 
	   xmlns:artifact="antlib:org.apache.maven.artifact.ant"
	   xmlns:rsel="antlib:org.apache.tools.ant.types.resources.selectors">
	
	<description>Download open source jars from the internet.</description>

	<property name="lib" value="${basedir}${file.separator}lib" />
	<property name="libs_src_dir" value="${lib}${file.separator}sources" />
	<property environment="env" />
	<dirname file="${ant.file.refresh_libs}" property="refresh_libs_basedir" />
	<property file="${refresh_libs_basedir}${file.separator}copy.properties" />
    <available property="already_downloaded" type="dir" file="${lib}" />

    <!--
      Bootstrap maven libs
      -->
    <property name="maven_download_dir" value="${user.home}/.m2/repository/org/apache/maven/maven-ant-tasks/2.0.10/" />
    <available property="bootstrapped" type="dir" file="${maven_download_dir}" />

    <target name="bootstrap" unless="bootstrapped">
        <mkdir dir="${maven_download_dir}" />
        <get src="http://central.maven.org/maven2/org/apache/maven/maven-ant-tasks/2.0.10/maven-ant-tasks-2.0.10.jar" 
             dest="${maven_download_dir}" />
    </target>
    
    <target name="init" depends="bootstrap">
        <taskdef uri="antlib:org.apache.maven.artifact.ant" resource="org/apache/maven/artifact/ant/antlib.xml">
            <classpath>
                <fileset dir="${maven_download_dir}">
                    <include name="*.jar" />
                </fileset>
            </classpath>
        </taskdef>
    </target>		

	<target name="clean" description="deletes external libraries folder">
		<delete dir="${lib}" />
	</target>
	
	<target name="initNexus" description="use Nexus public repository that mirrors the real repos" if="nexusURL">
	    <artifact:remoteRepository id="central.repository" url="${nexusURL}" />
	    <artifact:remoteRepository id="ettrema.repository" url="${nexusURL}" />
	</target>
	
	<target name="initRemoteMavenRepos" description="use real Maven repositories directly" unless="nexusURL">
	    <!-- remote repositories as defined in copy.properties -->
	    <artifact:remoteRepository id="central.repository" url="http://repo1.maven.org/maven2" />
	    <artifact:remoteRepository id="ettrema.repository" url="http://milton.io/maven" />
	</target>

	<target name="initMavenRepos" description="init Maven repositories to use when downloading artifacts" 
			depends="initNexus, initRemoteMavenRepos" />	

	<target name="load_m2_deps" depends="init, create, initMavenRepos" unless="already_downloaded">
		<!-- remote repositories as defined in copy.properties -->
		<artifact:localRepository id="local.repository" path="${user.home}/.m2/repository" />
        
        <!-- setproxy proxyhost="46.4.28.8" proxyport="3128" /-->
        
		<!-- we can probably replace this with a reference to a pom.xml file -->
		<!-- Use http://mvnrepository.com/ to look stuff up -->
		<artifact:dependencies filesetId="dependency.fileset" sourcesFilesetId="sources.dependency.fileset" versionsId="dependency.versions" useScope="runtime">

			<localRepository refid="local.repository" />
			<remoteRepository refid="ettrema.repository" />
			<remoteRepository refid="central.repository" />

		    <dependency groupId="io.milton" artifactId="milton-api" version="2.6.4.0"/>
            <dependency groupId="io.milton" artifactId="milton-server-ce" version="2.6.4.0"/>
		    
            <!--dependency groupId="com.ettrema" artifactId="milton-json" version="${milton.version}"/-->
            <!--dependency groupId="com.ettrema" artifactId="milton-filesystem" version="${milton.version}"/-->

			<!--dependency groupId="org.apache.maven" artifactId="super-pom" version="2.0" scope="provided" /-->
			
            <dependency groupId="commons-fileupload" artifactId="commons-fileupload" version="1.2.1" />

		    <dependency groupId="org.slf4j" artifactId="slf4j-simple" version="1.7.5" />
            <!--dependency groupId="org.slf4j" artifactId="slf4j-jcl" version="1.5.8" /-->
            <dependency groupId="org.slf4j" artifactId="slf4j-log4j12" version="1.5.6" scope="provided" />

		</artifact:dependencies>
        
		<restrict id="filtered.dependencies">
            <fileset refid="dependency.fileset"/>
            <rsel:not>
              <rsel:or>
                <!--rsel:name name="**/commons*.jar"/-->
                <rsel:name name="**/log4j-*.jar"/>
                <rsel:name name="**/imageio-*.jar"/>
                <rsel:name name="**/geoapi*.jar"/>
                <rsel:name name="**/spring*.jar"/>
                <rsel:name name="**/aopalliance*.jar"/>
                <!--rsel:name name="**/x*.jar"/-->
              </rsel:or>
            </rsel:not>
		</restrict>

	</target>

	<target name="print" depends="load_m2_deps">
		<description>Print the dependencies the jars</description>

		<!-- setproxy proxyhost="10.0.16.2" proxyport="3128"/-->
        
		<path id="jars">
			<fileset refid="filtered.dependencies" />
		</path>
		<property name="myjars" refid="jars" />
		<echo message="Jars = ${myjars}" />
		<!--propertyregex property="listjars"
		              input="${myjars}"
		              regexp="\;"
		              select="{$line.seperator}"
		              casesensitive="false" /-->
		<echo message="Jars = ${myjars}" />
		<echo message="Jars = ${listjars}" />
	</target>

	<target name="build" depends="create, load_m2_deps" unless="already_downloaded">
		<description>Download the jars - used by a manual "clean"</description>

		<!-- (flat) copy all downloaded JARs (classes) to plugin directory ${lib} -->
		<copy todir="${lib}" verbose="true" flatten="true">
	        <restrict refid="filtered.dependencies" />
		</copy>

		<!-- (flat) copy downloaded source JARs (sources) to plugin directory ${libs_src_dir} -->
		<copy todir="${libs_src_dir}" flatten="true" verbose="true">
			<fileset refid="sources.dependency.fileset" />
			<chainedmapper>
				<mapper type="flatten" />
				<globmapper from="*-sources.jar" to="*-sources.zip" />
			</chainedmapper>
		</copy>
		<!-- <eclipse.refreshLocal resource="net.refractions.udig.libs/lib" depth="infinite"/>	-->
	</target>

	<target name="create" unless="already_downloaded">
		<description>creates the lib directory if needed</description>
		<mkdir dir="${lib}" />
		<mkdir dir="${libs_src_dir}" />
	</target>

	<!-- Used by headless build please make sure this does everthing from clean to download and fix etc.. -->
	<target name="full-build" depends="clean, build" description="clean and build">
	</target>

	<!-- target: extSources_to_project_classpath (manual Build of project n.r.udig/libs as trigger via ".externalToolBuilders/Refresh Libs.launch") -->
	<target name="extSources_to_project_classpath" description="augments eclipse project .classpath file to link sources to library jars (F3 key)">
		<!-- eclipse project .classpath file -->
		<property name="project_classpath" value="${basedir}${file.separator}.classpath" />

		<!-- prepare Path containing all source library jars from ${libs_src_dir} to be compared with library jars in RegExp of Replace -->
		<pathconvert property="sourceJars" pathsep="|">
			<!-- temporary Path/FileSet with all source library jars -->
			<fileset dir="${libs_src_dir}" includes="*-sources.zip" />
			<!-- directory containing sources archives -->
			<globmapper handledirsep="true" from="${libs_src_dir}/*-sources.zip" to="*" />
		</pathconvert>

		<!-- update only .classpath entries WITH corresponding source library archive and NO preexisiting attributes after "path" attribute -->
		<replaceregexp file="${project_classpath}" flags="gm" byline="true" description="default: linking all available sources archives to corresponding library jars">
			<regexp pattern="(.* path=&quot;lib/)(${sourceJars})\.jar&quot; */&gt;" />
			<substitution expression="\1\2\.jar&quot; sourcepath=&quot;lib/sources/\2-sources.zip&quot;/&gt;" />
		</replaceregexp>

		<!-- example to specify different source locations of special/defined library jars -->
		<!-- overwrite/update .classpath entries WITH corresponding sources in local project "geotools_trunk XSD" -->
		<!--    <replaceregexp file="${project_classpath}" flags="gm" byline="true">
    		<regexp pattern="(.* path=&quot;lib/)gt-(xsd-.*)(-\d\..*)\.jar&quot; *.*/&gt;"/>
    		<substitution expression="\1gt-\2\3.jar&quot; sourcepath=&quot;/geotools_trunk/modules/extension/xsd/\2/src/main/java&quot;/&gt;"/>
    	</replaceregexp>
-->
		<echo level="info" message="updated ${project_classpath} with links to source archives" />
	</target>
</project>
