/* 
 * polymap.org
 * Copyright (C) 2009-2013, Polymap GmbH. All rights reserved.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 */
package org.polymap.core.security;

import java.util.Set;

import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.jface.preference.PreferencePage;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPreferencePage;

import org.polymap.core.Messages;
import org.polymap.core.runtime.Polymap;

/**
 * General Login preferences page that delegates to a page generated by the active
 * {@link PreferencesLoginModule}.
 * 
 * @author <a href="http://www.polymap.de">Falko Bräutigam</a>
 * @since 3.1
 */
public class LoginModulePreferencePage
        extends PreferencePage
        implements IWorkbenchPreferencePage {

    private PreferencesLoginModule      loginModule;
        
    private IWorkbenchPreferencePage    delegate;
    
    
    public LoginModulePreferencePage() {
        Set<PreferencesLoginModule> loginModules = Polymap.instance().getSubject().getPrivateCredentials( PreferencesLoginModule.class );
        if (!loginModules.isEmpty()) {
            loginModule = loginModules.iterator().next();
            delegate = loginModule.createPreferencePage();
        }
    }


    @Override
    public void init( IWorkbench workbench ) {
        noDefaultAndApplyButton();
        if (delegate != null) {
            delegate.init( workbench );
        }
    }


    @Override
    protected Control createContents( Composite parent ) {        
        // check admin
        if (!SecurityUtils.isAdmin( Polymap.instance().getPrincipals() )) {
            Label msg = new Label( parent, SWT.None ); 
            msg.setText( Messages.get( "DummyLoginPreferences_noAccess" ) );
            return msg;
        }
        // check loginModule
        else if (loginModule == null) {
            Label msg = new Label( parent, SWT.None ); 
            msg.setText( Messages.get( "LoginPreferences_noLoginModule" ) );
            return msg;
        }
        //
        else {
            delegate.createControl( parent );
            return delegate.getControl();
        }
    }


    @Override
    public boolean isValid() {
        return delegate != null ? delegate.isValid() : true;
    }


    @Override
    public boolean okToLeave() {
        return delegate != null ? delegate.okToLeave() : true;
    }


    public boolean performCancel() {
        return delegate != null ? delegate.performCancel() : true;
    }


    public boolean performOk() {
        return delegate != null ? delegate.performOk() : true;
    }
    

    protected void performDefaults() {
        throw new RuntimeException( "not yet implemented." );
    }


    public void performHelp() {
        throw new RuntimeException( "not yet implemented." );
    }

}
